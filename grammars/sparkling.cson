'name': 'Sparkling'
'comment': 'Sparkling Syntax Highlighting'
'scopeName': 'source.spn'
'fileTypes': ['spn']
'firstLineMatch': '\\A#!.*?\\bspn\\b'
'patterns': [
    {   # Comment one-line
        'begin': '(#|/{2})'
        'captures':
            '0':
                'name': 'punctuation.definition.comment.spn'
        'end': '\\n'
        'name': 'comment.line.spn'
    }
    {   # Comment block
      'begin': '/\\*'
      'captures':
        '0':
          'name': 'punctuation.definition.comment.spn'
      'end': '\\*/'
      'name': 'comment.block.spn'
    }
    {   # Keyword control
      'match': '\\b(and|break|continue|do|else|extern|fn|for|if|let|not|or|return|sizeof|typeof|while)\\b'
      'name': 'keyword.control.spn'
    }
    {   # Constants (+ math library)
      'match': '\\b(false|nil|true|M_E|M_PI|M_SQRT2|M_PHI|M_NAN|M_INF)\\b|(?<![.])[.]{3}(?![.])'
      'name': 'constant.language.spn'
    }
    {   # Numbers (Digits, Hexadecimal, Octal, Binary, decimal floating-point, decimal in scientific notation)
      'match': '(?<![\\d.])0x[a-fA-F\\d]+|(?<![\\d.])0o[0-7\\d]+|(?<![\\d.])0b[0-1\\d]+|\\b\\d+(\\.\\d+)?([eE]-?\\d+)?|\\.\\d+([eE]-?\\d+)?'
      'name': 'constant.numeric.spn'
    }
    {   # Single Character
        'match': '\'.*\''
        'name': 'string.quoted.single.spn'
    }
    {   # Strings
        'begin': '"'
        'end': '"'
        'name': 'string.quoted.double.spn'
        'patterns': [
            {   # Character escapes
                'match': '\\\\.'
                'name': 'constant.character.escape.spn'
            }
            {   # String format (for printf)
                'match': '%(\\d*?(\\.\\d*)?)?[scduoefxXbB%]'
                'name': 'constant.other.placeholder.spn'
            }
        ]
    }
    {   # Self & Super
        'match': '(?<![^.]\\.|:)\\b(self|super)\\b'
        'name': 'variable.language.self.spn'
    }
    {   # Hashmap key
        'match': '\\w+\\s*(?=:)'
        #'match': '\\s*(\\w+)\\s*(?=\\:)'
        'name': 'string.spn'
    }
    {   # stdlib global functions
        'match': '(?<![^.]\\.|:)\\b(print|printf|round|floor|ceil|min|max|random|isnan|isinf|isfin|isfloat|isint|fopen|remove|rename|tmpfile|readfile|fact|binom|can2pol|pol2can|cplx_add|cplx_sub|cplx_mul|cplx_div|cplx_sin|cplx_cos|cplx_tan|cplx_cot|cplx_conj|range|getenv|system|assert|time|clock|sleep|utctime|localtime|fmtdate|difftime|parse|parseexpr|compilestr|exprtofn|compileast|toint|tofloat|tonumber|call|apply|require|dynld|backtrace|identify)\\b(?=(\\()([^)]*)(\\)))'
        'name': 'support.function.spn'
    }
    {   # stdlib global descriptors (will use same style as the global functions)
        'match': '(?<![^.]\\.|:)\\b(Array|String|HashMap|Function|stdin|stdout|stderr)\\b'
        'name': 'support.function.spn'
    }
    {   # stdlib methods
        'match': '(?<=[^.]\\.)\\b(close|getline|read|write|flush|tell|seek|eof|find|substr|substrto|substrfrom|split|repeat|tolower|toupper|format|sort|find|pfind|bsearch|any|all|slice|join|foreach|reduce|filter|map|insert|inject|erase|concat|push|pop|last|swap|reverse|zipwith|keys|values|zip)\\b(?=(\\()([^)]*)(\\)))'
        'name': 'support.function.library.spn'
    }
    {   # Object method
        'match': '\\b([A-Za-z_]\\w*)\\b(?=\\s*(?:[({"\']|\\[\\[))'
        'name': 'support.function.any-method.spn'
    }
    {   # Object property
        'match': '(?<=[^.]\\.)\\b([A-Za-z_]\\w*)\\b'
        'name': 'variable.other.spn'
    }
    {   # Function declaration ---> let foo = fn() {};
        'captures':
            '1':
                'name': 'entity.name.function.spn'
        'match': '(?<=let)\\s+(\\w+)\\s*=\\s*(?=fn)'
        'name': 'meta.function.spn'
    }
    {   # Function statement ---> fn foo(){}
        'captures':
            '1':
                'name': 'keyword.control.spn'
            '2':
                'name': 'entity.name.function.scope.spn'
            '3':
                'name': 'entity.name.function.spn'
            '4':
                'name': 'punctuation.definition.parameters.begin.spn'
            '5':
                'name': 'variable.parameter.function.spn'
            '6':
                'name': 'punctuation.definition.parameters.end.spn'
        'match': '\\b(fn)(?:\\s+([a-zA-Z_.:]+[.:])?([a-zA-Z_]\\w*)\\s*)?(\\()([^)]*)(\\))'
        'name': 'meta.function.spn'
    }
]
